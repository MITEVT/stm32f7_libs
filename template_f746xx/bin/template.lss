
bin/template.elf:     file format elf32-littlearm


Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000428 	.word	0x20000428
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08000640 	.word	0x08000640

080001ec <frame_dummy>:
 80001ec:	4b0c      	ldr	r3, [pc, #48]	; (8000220 <frame_dummy+0x34>)
 80001ee:	b143      	cbz	r3, 8000202 <frame_dummy+0x16>
 80001f0:	480c      	ldr	r0, [pc, #48]	; (8000224 <frame_dummy+0x38>)
 80001f2:	490d      	ldr	r1, [pc, #52]	; (8000228 <frame_dummy+0x3c>)
 80001f4:	b510      	push	{r4, lr}
 80001f6:	f3af 8000 	nop.w
 80001fa:	480c      	ldr	r0, [pc, #48]	; (800022c <frame_dummy+0x40>)
 80001fc:	6803      	ldr	r3, [r0, #0]
 80001fe:	b923      	cbnz	r3, 800020a <frame_dummy+0x1e>
 8000200:	bd10      	pop	{r4, pc}
 8000202:	480a      	ldr	r0, [pc, #40]	; (800022c <frame_dummy+0x40>)
 8000204:	6803      	ldr	r3, [r0, #0]
 8000206:	b933      	cbnz	r3, 8000216 <frame_dummy+0x2a>
 8000208:	4770      	bx	lr
 800020a:	4b09      	ldr	r3, [pc, #36]	; (8000230 <frame_dummy+0x44>)
 800020c:	2b00      	cmp	r3, #0
 800020e:	d0f7      	beq.n	8000200 <frame_dummy+0x14>
 8000210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000214:	4718      	bx	r3
 8000216:	4b06      	ldr	r3, [pc, #24]	; (8000230 <frame_dummy+0x44>)
 8000218:	2b00      	cmp	r3, #0
 800021a:	d0f5      	beq.n	8000208 <frame_dummy+0x1c>
 800021c:	4718      	bx	r3
 800021e:	bf00      	nop
 8000220:	00000000 	.word	0x00000000
 8000224:	08000640 	.word	0x08000640
 8000228:	2000042c 	.word	0x2000042c
 800022c:	20000428 	.word	0x20000428
 8000230:	00000000 	.word	0x00000000

08000234 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000234:	f8df d034 	ldr.w	sp, [pc, #52]	; 800026c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000238:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800023a:	e003      	b.n	8000244 <LoopCopyDataInit>

0800023c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800023c:	4b0c      	ldr	r3, [pc, #48]	; (8000270 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800023e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000240:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000242:	3104      	adds	r1, #4

08000244 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000244:	480b      	ldr	r0, [pc, #44]	; (8000274 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000246:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000248:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800024a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800024c:	d3f6      	bcc.n	800023c <CopyDataInit>
  ldr  r2, =_sbss
 800024e:	4a0b      	ldr	r2, [pc, #44]	; (800027c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000250:	e002      	b.n	8000258 <LoopFillZerobss>

08000252 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000252:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000254:	f842 3b04 	str.w	r3, [r2], #4

08000258 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000258:	4b09      	ldr	r3, [pc, #36]	; (8000280 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800025a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800025c:	d3f9      	bcc.n	8000252 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800025e:	f000 f91d 	bl	800049c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000262:	f000 f949 	bl	80004f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000266:	f000 f80f 	bl	8000288 <main>
  bx  lr    
 800026a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800026c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8000270:	08000668 	.word	0x08000668
  ldr  r0, =_sdata
 8000274:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000278:	20000428 	.word	0x20000428
  ldr  r2, =_sbss
 800027c:	20000428 	.word	0x20000428
  ldr  r3, = _ebss
 8000280:	20000444 	.word	0x20000444

08000284 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000284:	e7fe      	b.n	8000284 <ADC_IRQHandler>
	...

08000288 <main>:
#include <stm32f7xx.h>

int main(void) {
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
	// f_in = 16Mhz
	// f_in / PLLM = 2Mhz -> PLLM = 8
	// f_vco = f_in * PLLN / PLLM = 432 Mhz -> PLLN = 216
	// f_out = f_vco / PLLP = 216 Mhz -> PLLP = 2
	// f_out2 = f_vco / PLLQ = 48 Mhz -> PLLQ = 9
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC; // HSI as source
 800028c:	4a7c      	ldr	r2, [pc, #496]	; (8000480 <main+0x1f8>)
 800028e:	4b7c      	ldr	r3, [pc, #496]	; (8000480 <main+0x1f8>)
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000296:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLP | RCC_PLLCFGR_PLLQ);
 8000298:	4979      	ldr	r1, [pc, #484]	; (8000480 <main+0x1f8>)
 800029a:	4b79      	ldr	r3, [pc, #484]	; (8000480 <main+0x1f8>)
 800029c:	685a      	ldr	r2, [r3, #4]
 800029e:	4b79      	ldr	r3, [pc, #484]	; (8000484 <main+0x1fc>)
 80002a0:	4013      	ands	r3, r2
 80002a2:	604b      	str	r3, [r1, #4]
	RCC->PLLCFGR |= 8U << RCC_PLLCFGR_PLLM_Pos;
 80002a4:	4a76      	ldr	r2, [pc, #472]	; (8000480 <main+0x1f8>)
 80002a6:	4b76      	ldr	r3, [pc, #472]	; (8000480 <main+0x1f8>)
 80002a8:	685b      	ldr	r3, [r3, #4]
 80002aa:	f043 0308 	orr.w	r3, r3, #8
 80002ae:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 216U << RCC_PLLCFGR_PLLN_Pos;
 80002b0:	4a73      	ldr	r2, [pc, #460]	; (8000480 <main+0x1f8>)
 80002b2:	4b73      	ldr	r3, [pc, #460]	; (8000480 <main+0x1f8>)
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	f443 5358 	orr.w	r3, r3, #13824	; 0x3600
 80002ba:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 0U << RCC_PLLCFGR_PLLP_Pos; // PLLP=2
 80002bc:	4a70      	ldr	r2, [pc, #448]	; (8000480 <main+0x1f8>)
 80002be:	4b70      	ldr	r3, [pc, #448]	; (8000480 <main+0x1f8>)
 80002c0:	685b      	ldr	r3, [r3, #4]
 80002c2:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= 9U << RCC_PLLCFGR_PLLQ_Pos;
 80002c4:	4a6e      	ldr	r2, [pc, #440]	; (8000480 <main+0x1f8>)
 80002c6:	4b6e      	ldr	r3, [pc, #440]	; (8000480 <main+0x1f8>)
 80002c8:	685b      	ldr	r3, [r3, #4]
 80002ca:	f043 6310 	orr.w	r3, r3, #150994944	; 0x9000000
 80002ce:	6053      	str	r3, [r2, #4]

	RCC->CR |= RCC_CR_PLLON; // Enable PLL
 80002d0:	4a6b      	ldr	r2, [pc, #428]	; (8000480 <main+0x1f8>)
 80002d2:	4b6b      	ldr	r3, [pc, #428]	; (8000480 <main+0x1f8>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002da:	6013      	str	r3, [r2, #0]
	RCC->APB1ENR |= RCC_APB1ENR_PWREN; // Enable PWR
 80002dc:	4a68      	ldr	r2, [pc, #416]	; (8000480 <main+0x1f8>)
 80002de:	4b68      	ldr	r3, [pc, #416]	; (8000480 <main+0x1f8>)
 80002e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002e6:	6413      	str	r3, [r2, #64]	; 0x40
	PWR->CR1 |= PWR_CR1_ODEN; // Enable overdrive mode
 80002e8:	4a67      	ldr	r2, [pc, #412]	; (8000488 <main+0x200>)
 80002ea:	4b67      	ldr	r3, [pc, #412]	; (8000488 <main+0x200>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002f2:	6013      	str	r3, [r2, #0]
	while(!(PWR->CSR1 & PWR_CSR1_ODRDY)); // Wait for overdrive mode
 80002f4:	bf00      	nop
 80002f6:	4b64      	ldr	r3, [pc, #400]	; (8000488 <main+0x200>)
 80002f8:	685b      	ldr	r3, [r3, #4]
 80002fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d0f9      	beq.n	80002f6 <main+0x6e>
	PWR->CR1 |= PWR_CR1_ODSWEN; // Switch to overdrive
 8000302:	4a61      	ldr	r2, [pc, #388]	; (8000488 <main+0x200>)
 8000304:	4b60      	ldr	r3, [pc, #384]	; (8000488 <main+0x200>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800030c:	6013      	str	r3, [r2, #0]
	while(!(PWR->CSR1 & PWR_CSR1_ODSWRDY));// Wait for overdrive
 800030e:	bf00      	nop
 8000310:	4b5d      	ldr	r3, [pc, #372]	; (8000488 <main+0x200>)
 8000312:	685b      	ldr	r3, [r3, #4]
 8000314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000318:	2b00      	cmp	r3, #0
 800031a:	d0f9      	beq.n	8000310 <main+0x88>
	while(!(RCC->CR & RCC_CR_PLLRDY)); // Wait for PLL to lock
 800031c:	bf00      	nop
 800031e:	4b58      	ldr	r3, [pc, #352]	; (8000480 <main+0x1f8>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000326:	2b00      	cmp	r3, #0
 8000328:	d0f9      	beq.n	800031e <main+0x96>

	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 800032a:	4a58      	ldr	r2, [pc, #352]	; (800048c <main+0x204>)
 800032c:	4b57      	ldr	r3, [pc, #348]	; (800048c <main+0x204>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	f023 030f 	bic.w	r3, r3, #15
 8000334:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= 7 << FLASH_ACR_LATENCY_Pos;
 8000336:	4a55      	ldr	r2, [pc, #340]	; (800048c <main+0x204>)
 8000338:	4b54      	ldr	r3, [pc, #336]	; (800048c <main+0x204>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	f043 0307 	orr.w	r3, r3, #7
 8000340:	6013      	str	r3, [r2, #0]
	RCC->CFGR &= ~(RCC_CFGR_PPRE1 | RCC_CFGR_PPRE2); // Clear APB1/2 precaler
 8000342:	4a4f      	ldr	r2, [pc, #316]	; (8000480 <main+0x1f8>)
 8000344:	4b4e      	ldr	r3, [pc, #312]	; (8000480 <main+0x1f8>)
 8000346:	689b      	ldr	r3, [r3, #8]
 8000348:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 800034c:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 5 << RCC_CFGR_PPRE1_Pos; // Set APB1 prescaler to 4 (54 Mhz (Max))
 800034e:	4a4c      	ldr	r2, [pc, #304]	; (8000480 <main+0x1f8>)
 8000350:	4b4b      	ldr	r3, [pc, #300]	; (8000480 <main+0x1f8>)
 8000352:	689b      	ldr	r3, [r3, #8]
 8000354:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000358:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 4 << RCC_CFGR_PPRE2_Pos; // Set APB2 prescaler to 2 (108 Mhz (Max))
 800035a:	4a49      	ldr	r2, [pc, #292]	; (8000480 <main+0x1f8>)
 800035c:	4b48      	ldr	r3, [pc, #288]	; (8000480 <main+0x1f8>)
 800035e:	689b      	ldr	r3, [r3, #8]
 8000360:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000364:	6093      	str	r3, [r2, #8]

	RCC->CFGR |= 2 << RCC_CFGR_SW_Pos; // Switch to PLL
 8000366:	4a46      	ldr	r2, [pc, #280]	; (8000480 <main+0x1f8>)
 8000368:	4b45      	ldr	r3, [pc, #276]	; (8000480 <main+0x1f8>)
 800036a:	689b      	ldr	r3, [r3, #8]
 800036c:	f043 0302 	orr.w	r3, r3, #2
 8000370:	6093      	str	r3, [r2, #8]
	while(!(RCC->CFGR & (0x2 << RCC_CFGR_SWS_Pos)));
 8000372:	bf00      	nop
 8000374:	4b42      	ldr	r3, [pc, #264]	; (8000480 <main+0x1f8>)
 8000376:	689b      	ldr	r3, [r3, #8]
 8000378:	f003 0308 	and.w	r3, r3, #8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0f9      	beq.n	8000374 <main+0xec>

	// Configure SYSCLK out on MCO2 (PC9)
	RCC->CFGR &= ~RCC_CFGR_MCO2; // Set MCO2 = 0 for SYSCLK
 8000380:	4a3f      	ldr	r2, [pc, #252]	; (8000480 <main+0x1f8>)
 8000382:	4b3f      	ldr	r3, [pc, #252]	; (8000480 <main+0x1f8>)
 8000384:	689b      	ldr	r3, [r3, #8]
 8000386:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800038a:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_MCO2PRE; // clear prescaler
 800038c:	4a3c      	ldr	r2, [pc, #240]	; (8000480 <main+0x1f8>)
 800038e:	4b3c      	ldr	r3, [pc, #240]	; (8000480 <main+0x1f8>)
 8000390:	689b      	ldr	r3, [r3, #8]
 8000392:	f023 5360 	bic.w	r3, r3, #939524096	; 0x38000000
 8000396:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 6U << RCC_CFGR_MCO2PRE_Pos; // Prescale by 4
 8000398:	4a39      	ldr	r2, [pc, #228]	; (8000480 <main+0x1f8>)
 800039a:	4b39      	ldr	r3, [pc, #228]	; (8000480 <main+0x1f8>)
 800039c:	689b      	ldr	r3, [r3, #8]
 800039e:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80003a2:	6093      	str	r3, [r2, #8]

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN; // Enable Port C
 80003a4:	4a36      	ldr	r2, [pc, #216]	; (8000480 <main+0x1f8>)
 80003a6:	4b36      	ldr	r3, [pc, #216]	; (8000480 <main+0x1f8>)
 80003a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003aa:	f043 0304 	orr.w	r3, r3, #4
 80003ae:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOC->OSPEEDR |= 1U << GPIO_OSPEEDER_OSPEEDR9_Pos; // Medium Speed
 80003b0:	4a37      	ldr	r2, [pc, #220]	; (8000490 <main+0x208>)
 80003b2:	4b37      	ldr	r3, [pc, #220]	; (8000490 <main+0x208>)
 80003b4:	689b      	ldr	r3, [r3, #8]
 80003b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003ba:	6093      	str	r3, [r2, #8]
	GPIOC->MODER &= ~GPIO_MODER_MODER9;
 80003bc:	4a34      	ldr	r2, [pc, #208]	; (8000490 <main+0x208>)
 80003be:	4b34      	ldr	r3, [pc, #208]	; (8000490 <main+0x208>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80003c6:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODER9_1; // 0b10 - Alternate Mode
 80003c8:	4a31      	ldr	r2, [pc, #196]	; (8000490 <main+0x208>)
 80003ca:	4b31      	ldr	r3, [pc, #196]	; (8000490 <main+0x208>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003d2:	6013      	str	r3, [r2, #0]
	GPIOC->AFR[1] &= ~GPIO_AFRH_AFRH1; // Alternate Mode 0 (8 + AFRH1 = AFRH9)
 80003d4:	4a2e      	ldr	r2, [pc, #184]	; (8000490 <main+0x208>)
 80003d6:	4b2e      	ldr	r3, [pc, #184]	; (8000490 <main+0x208>)
 80003d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80003de:	6253      	str	r3, [r2, #36]	; 0x24

	// Configure PLL out on MCO1 (PA8)
	RCC->CFGR |= RCC_CFGR_MCO1; // Set MCO1 = 3 for PLL
 80003e0:	4a27      	ldr	r2, [pc, #156]	; (8000480 <main+0x1f8>)
 80003e2:	4b27      	ldr	r3, [pc, #156]	; (8000480 <main+0x1f8>)
 80003e4:	689b      	ldr	r3, [r3, #8]
 80003e6:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 80003ea:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_MCO1PRE; // clear prescaler
 80003ec:	4a24      	ldr	r2, [pc, #144]	; (8000480 <main+0x1f8>)
 80003ee:	4b24      	ldr	r3, [pc, #144]	; (8000480 <main+0x1f8>)
 80003f0:	689b      	ldr	r3, [r3, #8]
 80003f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003f6:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= 6U << RCC_CFGR_MCO1PRE_Pos; // Prescale by 4
 80003f8:	4a21      	ldr	r2, [pc, #132]	; (8000480 <main+0x1f8>)
 80003fa:	4b21      	ldr	r3, [pc, #132]	; (8000480 <main+0x1f8>)
 80003fc:	689b      	ldr	r3, [r3, #8]
 80003fe:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 8000402:	6093      	str	r3, [r2, #8]

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; // Enable Port A
 8000404:	4a1e      	ldr	r2, [pc, #120]	; (8000480 <main+0x1f8>)
 8000406:	4b1e      	ldr	r3, [pc, #120]	; (8000480 <main+0x1f8>)
 8000408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040a:	f043 0301 	orr.w	r3, r3, #1
 800040e:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->OSPEEDR |= 3U << GPIO_OSPEEDER_OSPEEDR8_Pos; // Very High Speed
 8000410:	4a20      	ldr	r2, [pc, #128]	; (8000494 <main+0x20c>)
 8000412:	4b20      	ldr	r3, [pc, #128]	; (8000494 <main+0x20c>)
 8000414:	689b      	ldr	r3, [r3, #8]
 8000416:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800041a:	6093      	str	r3, [r2, #8]
	GPIOA->MODER &= ~GPIO_MODER_MODER8;
 800041c:	4a1d      	ldr	r2, [pc, #116]	; (8000494 <main+0x20c>)
 800041e:	4b1d      	ldr	r3, [pc, #116]	; (8000494 <main+0x20c>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000426:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER8_1; // 0b10 - Alternate Mode
 8000428:	4a1a      	ldr	r2, [pc, #104]	; (8000494 <main+0x20c>)
 800042a:	4b1a      	ldr	r3, [pc, #104]	; (8000494 <main+0x20c>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000432:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[1] &= ~GPIO_AFRH_AFRH0; // Alternate Mode 0 (8 + AFRH0 = AFRH8)
 8000434:	4a17      	ldr	r2, [pc, #92]	; (8000494 <main+0x20c>)
 8000436:	4b17      	ldr	r3, [pc, #92]	; (8000494 <main+0x20c>)
 8000438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800043a:	f023 030f 	bic.w	r3, r3, #15
 800043e:	6253      	str	r3, [r2, #36]	; 0x24


	// Blue LED PB7
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; // Enable clock to GPIOB
 8000440:	4a0f      	ldr	r2, [pc, #60]	; (8000480 <main+0x1f8>)
 8000442:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <main+0x1f8>)
 8000444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000446:	f043 0302 	orr.w	r3, r3, #2
 800044a:	6313      	str	r3, [r2, #48]	; 0x30
	
	GPIOB->MODER &= ~GPIO_MODER_MODER7; //
 800044c:	4a12      	ldr	r2, [pc, #72]	; (8000498 <main+0x210>)
 800044e:	4b12      	ldr	r3, [pc, #72]	; (8000498 <main+0x210>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000456:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= GPIO_MODER_MODER7_0; // Set as output
 8000458:	4a0f      	ldr	r2, [pc, #60]	; (8000498 <main+0x210>)
 800045a:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <main+0x210>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000462:	6013      	str	r3, [r2, #0]
	GPIOB->ODR &= ~GPIO_ODR_ODR_7;
 8000464:	4a0c      	ldr	r2, [pc, #48]	; (8000498 <main+0x210>)
 8000466:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <main+0x210>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800046e:	6153      	str	r3, [r2, #20]

	while (1) {
		GPIOB->ODR ^= GPIO_ODR_ODR_7;
 8000470:	4a09      	ldr	r2, [pc, #36]	; (8000498 <main+0x210>)
 8000472:	4b09      	ldr	r3, [pc, #36]	; (8000498 <main+0x210>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 800047a:	6153      	str	r3, [r2, #20]
 800047c:	e7f8      	b.n	8000470 <main+0x1e8>
 800047e:	bf00      	nop
 8000480:	40023800 	.word	0x40023800
 8000484:	f0fc8000 	.word	0xf0fc8000
 8000488:	40007000 	.word	0x40007000
 800048c:	40023c00 	.word	0x40023c00
 8000490:	40020800 	.word	0x40020800
 8000494:	40020000 	.word	0x40020000
 8000498:	40020400 	.word	0x40020400

0800049c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80004a0:	4a11      	ldr	r2, [pc, #68]	; (80004e8 <SystemInit+0x4c>)
 80004a2:	4b11      	ldr	r3, [pc, #68]	; (80004e8 <SystemInit+0x4c>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	f043 0301 	orr.w	r3, r3, #1
 80004aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80004ac:	4b0e      	ldr	r3, [pc, #56]	; (80004e8 <SystemInit+0x4c>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80004b2:	490d      	ldr	r1, [pc, #52]	; (80004e8 <SystemInit+0x4c>)
 80004b4:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <SystemInit+0x4c>)
 80004b6:	681a      	ldr	r2, [r3, #0]
 80004b8:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <SystemInit+0x50>)
 80004ba:	4013      	ands	r3, r2
 80004bc:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80004be:	4b0a      	ldr	r3, [pc, #40]	; (80004e8 <SystemInit+0x4c>)
 80004c0:	4a0b      	ldr	r2, [pc, #44]	; (80004f0 <SystemInit+0x54>)
 80004c2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80004c4:	4a08      	ldr	r2, [pc, #32]	; (80004e8 <SystemInit+0x4c>)
 80004c6:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <SystemInit+0x4c>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80004d0:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <SystemInit+0x4c>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80004d6:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <SystemInit+0x58>)
 80004d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004dc:	609a      	str	r2, [r3, #8]
#endif
}
 80004de:	bf00      	nop
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	40023800 	.word	0x40023800
 80004ec:	fef6ffff 	.word	0xfef6ffff
 80004f0:	24003010 	.word	0x24003010
 80004f4:	e000ed00 	.word	0xe000ed00

080004f8 <__libc_init_array>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	4e0f      	ldr	r6, [pc, #60]	; (8000538 <__libc_init_array+0x40>)
 80004fc:	4d0f      	ldr	r5, [pc, #60]	; (800053c <__libc_init_array+0x44>)
 80004fe:	1b76      	subs	r6, r6, r5
 8000500:	10b6      	asrs	r6, r6, #2
 8000502:	bf18      	it	ne
 8000504:	2400      	movne	r4, #0
 8000506:	d005      	beq.n	8000514 <__libc_init_array+0x1c>
 8000508:	3401      	adds	r4, #1
 800050a:	f855 3b04 	ldr.w	r3, [r5], #4
 800050e:	4798      	blx	r3
 8000510:	42a6      	cmp	r6, r4
 8000512:	d1f9      	bne.n	8000508 <__libc_init_array+0x10>
 8000514:	4e0a      	ldr	r6, [pc, #40]	; (8000540 <__libc_init_array+0x48>)
 8000516:	4d0b      	ldr	r5, [pc, #44]	; (8000544 <__libc_init_array+0x4c>)
 8000518:	1b76      	subs	r6, r6, r5
 800051a:	f000 f891 	bl	8000640 <_init>
 800051e:	10b6      	asrs	r6, r6, #2
 8000520:	bf18      	it	ne
 8000522:	2400      	movne	r4, #0
 8000524:	d006      	beq.n	8000534 <__libc_init_array+0x3c>
 8000526:	3401      	adds	r4, #1
 8000528:	f855 3b04 	ldr.w	r3, [r5], #4
 800052c:	4798      	blx	r3
 800052e:	42a6      	cmp	r6, r4
 8000530:	d1f9      	bne.n	8000526 <__libc_init_array+0x2e>
 8000532:	bd70      	pop	{r4, r5, r6, pc}
 8000534:	bd70      	pop	{r4, r5, r6, pc}
 8000536:	bf00      	nop
 8000538:	0800065c 	.word	0x0800065c
 800053c:	0800065c 	.word	0x0800065c
 8000540:	08000664 	.word	0x08000664
 8000544:	0800065c 	.word	0x0800065c

08000548 <register_fini>:
 8000548:	4b02      	ldr	r3, [pc, #8]	; (8000554 <register_fini+0xc>)
 800054a:	b113      	cbz	r3, 8000552 <register_fini+0xa>
 800054c:	4802      	ldr	r0, [pc, #8]	; (8000558 <register_fini+0x10>)
 800054e:	f000 b805 	b.w	800055c <atexit>
 8000552:	4770      	bx	lr
 8000554:	00000000 	.word	0x00000000
 8000558:	08000569 	.word	0x08000569

0800055c <atexit>:
 800055c:	2300      	movs	r3, #0
 800055e:	4601      	mov	r1, r0
 8000560:	461a      	mov	r2, r3
 8000562:	4618      	mov	r0, r3
 8000564:	f000 b81a 	b.w	800059c <__register_exitproc>

08000568 <__libc_fini_array>:
 8000568:	b538      	push	{r3, r4, r5, lr}
 800056a:	4c0a      	ldr	r4, [pc, #40]	; (8000594 <__libc_fini_array+0x2c>)
 800056c:	4d0a      	ldr	r5, [pc, #40]	; (8000598 <__libc_fini_array+0x30>)
 800056e:	1b64      	subs	r4, r4, r5
 8000570:	10a4      	asrs	r4, r4, #2
 8000572:	d00a      	beq.n	800058a <__libc_fini_array+0x22>
 8000574:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8000578:	3b01      	subs	r3, #1
 800057a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 800057e:	3c01      	subs	r4, #1
 8000580:	f855 3904 	ldr.w	r3, [r5], #-4
 8000584:	4798      	blx	r3
 8000586:	2c00      	cmp	r4, #0
 8000588:	d1f9      	bne.n	800057e <__libc_fini_array+0x16>
 800058a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800058e:	f000 b85d 	b.w	800064c <_fini>
 8000592:	bf00      	nop
 8000594:	08000668 	.word	0x08000668
 8000598:	08000664 	.word	0x08000664

0800059c <__register_exitproc>:
 800059c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005a0:	4c25      	ldr	r4, [pc, #148]	; (8000638 <__register_exitproc+0x9c>)
 80005a2:	6825      	ldr	r5, [r4, #0]
 80005a4:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 80005a8:	4606      	mov	r6, r0
 80005aa:	4688      	mov	r8, r1
 80005ac:	4692      	mov	sl, r2
 80005ae:	4699      	mov	r9, r3
 80005b0:	b3c4      	cbz	r4, 8000624 <__register_exitproc+0x88>
 80005b2:	6860      	ldr	r0, [r4, #4]
 80005b4:	281f      	cmp	r0, #31
 80005b6:	dc17      	bgt.n	80005e8 <__register_exitproc+0x4c>
 80005b8:	1c43      	adds	r3, r0, #1
 80005ba:	b176      	cbz	r6, 80005da <__register_exitproc+0x3e>
 80005bc:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 80005c0:	2201      	movs	r2, #1
 80005c2:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 80005c6:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
 80005ca:	4082      	lsls	r2, r0
 80005cc:	4311      	orrs	r1, r2
 80005ce:	2e02      	cmp	r6, #2
 80005d0:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
 80005d4:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 80005d8:	d01e      	beq.n	8000618 <__register_exitproc+0x7c>
 80005da:	3002      	adds	r0, #2
 80005dc:	6063      	str	r3, [r4, #4]
 80005de:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 80005e2:	2000      	movs	r0, #0
 80005e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e8:	4b14      	ldr	r3, [pc, #80]	; (800063c <__register_exitproc+0xa0>)
 80005ea:	b303      	cbz	r3, 800062e <__register_exitproc+0x92>
 80005ec:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80005f0:	f3af 8000 	nop.w
 80005f4:	4604      	mov	r4, r0
 80005f6:	b1d0      	cbz	r0, 800062e <__register_exitproc+0x92>
 80005f8:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 80005fc:	2700      	movs	r7, #0
 80005fe:	e880 0088 	stmia.w	r0, {r3, r7}
 8000602:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 8000606:	4638      	mov	r0, r7
 8000608:	2301      	movs	r3, #1
 800060a:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 800060e:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 8000612:	2e00      	cmp	r6, #0
 8000614:	d0e1      	beq.n	80005da <__register_exitproc+0x3e>
 8000616:	e7d1      	b.n	80005bc <__register_exitproc+0x20>
 8000618:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 800061c:	430a      	orrs	r2, r1
 800061e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 8000622:	e7da      	b.n	80005da <__register_exitproc+0x3e>
 8000624:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 8000628:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 800062c:	e7c1      	b.n	80005b2 <__register_exitproc+0x16>
 800062e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000636:	bf00      	nop
 8000638:	08000658 	.word	0x08000658
 800063c:	00000000 	.word	0x00000000

08000640 <_init>:
 8000640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000642:	bf00      	nop
 8000644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000646:	bc08      	pop	{r3}
 8000648:	469e      	mov	lr, r3
 800064a:	4770      	bx	lr

0800064c <_fini>:
 800064c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800064e:	bf00      	nop
 8000650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000652:	bc08      	pop	{r3}
 8000654:	469e      	mov	lr, r3
 8000656:	4770      	bx	lr
